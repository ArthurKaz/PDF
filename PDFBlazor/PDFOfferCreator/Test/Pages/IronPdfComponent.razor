@page "/IronPdf"
@inject IJSRuntime JS

@using HtmlAgilityPack
<h3>IronPdfComponent</h3>

<button onclick="@SubmitHTML">Render HTML</button>

<h2>@_InputMsgModel.HTML</h2>
@* <iframe src="/html/htmlpage.html" width="100%" height="500"></iframe> *@

<div @innerHTML="htmlCode"></div>


@code {
    InputHTMLModel _InputMsgModel = new InputHTMLModel();
    // private readonly HttpClient httpClient = new HttpClient();
    private string htmlContent = string.Empty;

    public string updatedHtml;


    private async Task SubmitHTML()
    {
        string filePath = "wwwroot/html/htmlpage.html";
        htmlContent = await ReadHtmlFileAsync(filePath);

        updatedHtml = ReplaceYourNameWithJohn(htmlContent);


        var render = new IronPdf.ChromePdfRenderer();
        var doc = render.RenderHtmlAsPdf(updatedHtml);
        var fileName = "iron.pdf";
        using var streamRef = new DotNetStreamReference(stream: doc.Stream);
        await JS.InvokeVoidAsync("SubmitHTML", fileName, streamRef);

    }
    public static string ReplaceYourNameWithJohn(string input)
    {
        // Використовуємо метод Replace для заміни "YourName" на "John" у рядку
        string result = input.Replace("Name", "John");

        return result;
    }

    public async Task<string> ReadHtmlFileAsync(string filePath)
    {
        try
        {
            _InputMsgModel.HTML = "зчитування файла";
         

            using (StreamReader reader = new StreamReader(filePath))
            {
                string fileContent = await reader.ReadToEndAsync();
                _InputMsgModel.HTML =  fileContent;
                return fileContent;
            }
        }
        catch (Exception ex)
        {
            _InputMsgModel.HTML = "Помилка зчитування файлу: " + ex.Message;
            return "";
        }
    }

    public class InputHTMLModel
    {
        public string HTML { get; set; } = "sadf";
    }

}